// Code generated by mockery v2.53.2. DO NOT EDIT.

package acl

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, project, service, req
func (_m *MockInterface) Create(ctx context.Context, project string, service string, req CreateKafkaACLRequest) (*Acl, error) {
	ret := _m.Called(ctx, project, service, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Acl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, CreateKafkaACLRequest) (*Acl, error)); ok {
		return rf(ctx, project, service, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, CreateKafkaACLRequest) *Acl); ok {
		r0 = rf(ctx, project, service, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Acl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, CreateKafkaACLRequest) error); ok {
		r1 = rf(ctx, project, service, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, project, service, aclID
func (_m *MockInterface) Delete(ctx context.Context, project string, service string, aclID string) error {
	ret := _m.Called(ctx, project, service, aclID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, project, service, aclID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, project, serviceName
func (_m *MockInterface) List(ctx context.Context, project string, serviceName string) ([]*Acl, error) {
	ret := _m.Called(ctx, project, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Acl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*Acl, error)); ok {
		return rf(ctx, project, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*Acl); ok {
		r0 = rf(ctx, project, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Acl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, project, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
