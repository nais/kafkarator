// Code generated by mockery v2.9.4. DO NOT EDIT.

package acl

import (
	aiven "github.com/aiven/aiven-go-client"
	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: project, service, req
func (_m *MockInterface) Create(project string, service string, req aiven.CreateKafkaACLRequest) (*aiven.KafkaACL, error) {
	ret := _m.Called(project, service, req)

	var r0 *aiven.KafkaACL
	if rf, ok := ret.Get(0).(func(string, string, aiven.CreateKafkaACLRequest) *aiven.KafkaACL); ok {
		r0 = rf(project, service, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.KafkaACL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, aiven.CreateKafkaACLRequest) error); ok {
		r1 = rf(project, service, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: project, service, aclID
func (_m *MockInterface) Delete(project string, service string, aclID string) error {
	ret := _m.Called(project, service, aclID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(project, service, aclID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: project, serviceName
func (_m *MockInterface) List(project string, serviceName string) ([]*aiven.KafkaACL, error) {
	ret := _m.Called(project, serviceName)

	var r0 []*aiven.KafkaACL
	if rf, ok := ret.Get(0).(func(string, string) []*aiven.KafkaACL); ok {
		r0 = rf(project, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aiven.KafkaACL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
